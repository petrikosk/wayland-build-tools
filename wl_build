#!/bin/bash
launch_path="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"
. $HOME/.config/wayland-build-tools/wl_defines.sh
cp fix_pkg_conf_sysroot.sh $WLROOT
cp remove-la-files.sh $WLROOT
cp arm64.txt $WLROOT

if [ ! -e $WLROOT ]; then
	exit 1
fi

# Bail if errors
set -e

gen() {
	pkg=$1
	shift
	$WLROOT/remove-la-files.sh
	echo
	echo $pkg
	cd $WLROOT/$pkg
	echo "./autogen.sh $CONFIGURE_FLAGS --prefix=$PREFIX $*"
	./autogen.sh $CONFIGURE_FLAGS --prefix=$PREFIX $*
	#./autogen.sh $CONFIGURE_FLAGS $*
}

gen_configure() {
	pkg=$1
	shift
	$WLROOT/remove-la-files.sh
	echo
	echo $pkg
	cd $WLROOT/$pkg
	echo "./configure $CONFIGURE_FLAGS --prefix=$PREFIX $*"
	./configure $CONFIGURE_FLAGS --prefix=$PREFIX $*
	#./autogen.sh $CONFIGURE_FLAGS $*
}

gen_autogen() {
	pkg=$1
	shift
	$WLROOT/remove-la-files.sh
	echo
	echo $pkg
	cd $WLROOT/$pkg
	echo "autoreconf --install"
	autoreconf --install
	echo "./configure $CONFIGURE_FLAGS --prefix=$PREFIX $*"
	./configure $CONFIGURE_FLAGS --prefix=$PREFIX $*

}
gen_meson() {
	pkg=$1
	shift
	echo
	echo $pkg
	cd $WLROOT/$pkg
	rm -rf build
	echo "meson setup --cross-file $MESON_CROSS_FILE -Dprefix=$PREFIX $* build"
	meson setup --cross-file $MESON_CROSS_FILE \
	-Dprefix=$PREFIX $* build
	#meson setup --cross-file $MESON_CROSS_FILE $* build
}

compile() {
	args=$1
	make $1 -j$(nproc --all)
	make DESTDIR=$SYSROOT install
	make DESTDIR=$WLD install
	if [ $? != 0 ]; then
		echo "Build Error.  Terminating"
		exit
	fi
}

compile_meson() {
	DESTDIR=$SYSROOT ninja -C build/ install
	DESTDIR=$WLD ninja -C build/ install
	if [ $? != 0 ]; then
		echo "Build Error.  Terminating"
		exit
	fi
}

distcheck() {
	make distcheck
}

# TODO: Check if tree doesn't exist
# TODO: Log output
# TODO: If it's been a while since we last ran successfully, then
#       delete $WLD


# echo
# echo libicu
# cd $WLROOT/libicu/icu4c/source
# mkdir -p "build_${BUILD}"
# pushd "build_${BUILD}"
# env -i HOME="$HOME" bash -l -c ../configure
# env -i HOME="$HOME" bash -l -c 'make -j$(nproc --all)'
# popd
# mkdir -p "build_${HOST}"
# pushd "build_${HOST}"
# ../configure $CONFIGURE_FLAGS --prefix=$PREFIX --with-cross-build="$WLROOT/libicu/icu4c/source/build_${BUILD}"
# compile
# popd

# gen proto
# compile

# gen macros
# compile

# gen xorgproto \
# 	--enable-legacy

# compile

# gen libxau
# compile

# gen libxshmfence
# compile

# gen_meson libxkbcommon \
#     -Denable-x11=false \
#     -Dxkb-config-root=/usr/share/X11/xkb \
#     -Dx-locale-root=/usr/share/X11/locale
# compile_meson

# gen libxtrans
# 	compile

# gen libxcb
# compile

# cd $WLROOT/libx11/src/util
# cd $WLROOT/libx11
# git clean -xfd
# mkdir -p build_util
# pushd build_util
# env -i HOME="$HOME" bash -l -c ../autogen.sh
# env -i HOME="$HOME" bash -l -c 'make -C ../src/util makekeys'
# popd
# rm config.guess
# gen libx11 \
# 	--enable-malloc0returnsnull=no \
# 	--disable-static \
# 		--disable-dri2 \
# 		--with-driver=dri 
# compile 

# gen libxext \
# 	--enable-malloc0returnsnull=no
# compile

# gen libxfixes
# compile

# gen libxxf86vm \
# 	--enable-malloc0returnsnull=no
# compile

# gen libxrender \
# 	--enable-malloc0returnsnull=no
# compile

# gen libxrandr \
# 	--enable-malloc0returnsnull=no
# compile

# gen cairo --enable-xcb #--enable-gl
# compile

# gen_meson drm \
# 	-Dintel=false \
# 	-Dradeon=false \
# 	-Damdgpu=false \
# 	-Dnouveau=false \
# 	-Dvmwgfx=false \
# 	-Domap=false \
# 	-Dexynos=false \
# 	-Dfreedreno=false \
# 	-Dtegra=false \
# 	-Dvc4=false \
# 	-Detnaviv=false \
# 	-Dman-pages=false \
# 	-Dfreedreno-kgsl=false \
# 	-Dinstall-test-programs=true

# DESTDIR=$SYSROOT ninja -C build/ install

# Mesa is needed for glx only (software rendering). Xserver build dependency.
# Libmali takes care of EGL and GLES (hardware acceleration)
# gen_meson mesa \
# 	--buildtype=release     \
# 	-Dplatforms=x11 \
# 	-Dgallium-drivers=swrast \
# 	-Degl=disabled \
# 	-Dgles1=disabled \
# 	-Dgles2=disabled \
# 	-Dgbm=disabled \
# 	-Dglx=dri \
# 	-Dvulkan-drivers=     \
# 	-Dvalgrind=disabled     \
# 	-Dlibunwind=disabled 
# compile_meson

# gen_meson rockchip-linux-libmali \
#  	-Dplatform=x11
	
# compile_meson

# gen pixman
# compile

# gen_configure libunwind
# compile

# gen libevdev
# compile

# gen_meson libwacom # For wacom tablets.
# compile_meson

# gen_autogen check
# compile

# cd $WLROOT/libinput
# rm -rf $WLROOT/libinput/builddir/
# mkdir $WLROOT/libinput/builddir/
# gen_meson libinput \
# 	-Ddebug-gui=false \
# 	-Ddocumentation=false
# compile_meson

# gen libxdmcp
# compile

# gen libxkbfile
# compile

# gen libfontenc
# compile

# gen libXfont
# compile

# # In xkbcomp: expr.c and geometry.c need #define _GNU_SOURCE.
# # Otherwise, build fails. CFLAGS should have -D_GNU_SOURCE flag
# export CFLAGS="-D_GNU_SOURCE $CFLAGS"
# gen xkbcomp 
# compile
# . $HOME/.config/wayland-build-tools/wl_defines.sh

# gen libice
# compile

# gen libsm
# compile

# gen util
# compile

# gen_meson libepoxy \
# 	--buildtype=release 
# compile_meson

	# gen_configure nettle \
	# 	--disable-openssl
	# compile
# gen_meson libpciaccess
# compile_meson

# gen_meson libxcvt
# compile_meson

# gen_meson xserver \
# 		--buildtype=release \
# 		-Dagp=false \
# 		-Ddocs=false \
# 		-Ddri1=false \
# 		-Ddri2=false \
# 		-Ddri3=false \
# 		-Dvgahw=false \
# 		-Dxorg=true \
# 		-Dglamor=true \
# 		-Dxvfb=false \
# 		-Dxwin=false \
# 		-Dlog_dir=/var/log/Xorg.log \
# 		-Dxdmcp=false \
# 		-Dxdm-auth-1=false \
# 		-Dsecure-rpc=false \
# 		-Dipv6=false \
# 		-Dsystemd_logind=false \
# 		-Ddpms=false \
# 		-Dxvmc=false \
# 		-Dlinux_apm=false \
# 		-Dlinux_acpi=false 
# compile_meson


# gen libwebp
# gen_configure libwebp
# compile

# # gen linux-pam
# # gen_configure linux-pam \
# # 	--disable-doc
# # compile

# gen_meson libva
# compile_meson

# gen libxcursor
# compile

# gen_meson pango
# compile_meson

echo
echo config file
mkdir -p $WLD/etc/X11
pushd $launch_path
cp conf_files/20-modesetting.conf $WLD/etc/X11
popd

cd $WLROOT
